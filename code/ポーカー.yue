import 'lume' as :reduce, :sort, :shuffle, :first

手札を配る = ->
	数字, マーク = [i for i=1, 13], ['S', 'C', 'H', 'D']
	[{s, r} for r in *数字 for s in *マーク] |> shuffle |> first(5) |> -- for文２つ組み合わせの内包表記できる
		setmetatable({__tostring: => reduce(@, ((a, b)-> a..' '..rawget({S:'♠', C:'♣', H:'♥', D:'♦'}, b[1]) .. rawget(['A','2','3','4','5','6','7','8','9','T','J','Q','K'], b[2])), '')})

役を判定 = (cards)->
	-- 正規表現ライブラリをつかって判定するため、文字列にする。(この文字列は、人間に見せる表現と違って、正規表現で使いやすいものでよい)
	数字の集合 = [r for {_, r} in *cards] |> sort |> reduce(((a, b)-> a .. string.char(b)), '') -- 変換と結合を一緒にするときはreduceに初期値が必要
	マークの集合 = [s for {s, _}in *cards] |> sort |> reduce(((a, b)-> a .. b))

	フラッシュか = -> マークの集合\match('(.)%1%1%1%1')
	ストレートか = -> '01234' ==  [r for {_, r}in *cards] |> sort |> (=> [r-@[1] for r in *@]) |> reduce((a,b)->a..b)

	if ストレートか() and フラッシュか() then 'ストレートフラッシュ'
	else if 数字の集合\match('(.)%1%1%1') then 'フォーカード'
	else if 数字の集合\match('(.)%1%1(.)%2') or 数字の集合\match('(.)%1(.)%2%2') then 'フルハウス'
	else if フラッシュか() then 'フラッシュ'
	else if ストレートか() then 'ストレート'
	else if 数字の集合\match('(.)%1%1') then 'スリーカード'
	else if 数字の集合\match('(.)%1.?(.)%2') then 'ツーペア'
	else if 数字の集合\match('(.)%1') then 'ワンペア'
	else '役無し'

-- print 手札を配る() |> (=> @, 役を判定(@)) for _ = 1, 10
for _ = 1, 10 do print 手札を配る() |> (=> @, 役を判定(@))
-- for _ = 1, 10
-- 	手札 = 手札を配る()
-- 	print 手札, 役を判定(手札)

