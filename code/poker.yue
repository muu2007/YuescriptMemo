import 'lib.lume' as :reduce, :sort, :shuffle, :first, :all
-- import 'utf8'

const Rank, Suit = [i for i=1, 13], {'S', 'C', 'H', 'D'}

deal = ->
	[{s, r} for r in *Rank for s in *Suit] |> shuffle |> first(5) |>
		setmetatable({__tostring: => reduce(@, ((a, b)-> a..' '..rawget({S:'♠', C:'♣', H:'♥', D:'♦'}, b[1]) .. rawget({'A','2','3','4','5','6','7','8','9','10','J','Q','K'}, b[2])), '')})

getHand = (cards)->
	assert 5 == #cards and all([(s in Suit and 1 <= r and r <= 13) for {s, r} in *cards])
	ranks = [r for {_, r} in *cards] |> sort |> (=> [string.char(c) for c in *@]) |> table.concat
	suits = [s for {s, _}in *cards] |> sort |> table.concat

	is_flush = -> suits\match('(.)%1%1%1%1')
	is_straight = -> '01234' == sort([r for {_, r}in *cards]) |> (=> [r-@[1] for r in *@]) |> table.concat

	if is_straight() and is_flush() then 'straightflush'
	else if ranks\match('(.)%1%1%1') then 'fourcards'
	else if ranks\match('(.)%1%1(.)%2') or ranks\match('(.)%1(.)%2%2') then 'fullhouse'
	else if is_flush() then 'flush'
	else if is_straight() then 'straight'
	else if ranks\match('(.)%1%1') then 'threecards'
	else if ranks\match('(.)%1.?(.)%2') then 'twopair'
	else if ranks\match('(.)%1') then 'onepair'
	else 'nohand'

-- if package.loaded['busted']
for _ = 1, 10 do deal() |> (=> print @, getHand(@))
